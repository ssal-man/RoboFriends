{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","componentDidMount","fetch","then","response","json","users","onSearchChange","event","searchfield","target","value","filteredrobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAceA,EAZJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,GAAGC,EAAS,EAATA,MACjB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,WAAWC,IAAG,+BAA0BJ,EAA1B,cACvB,6BACI,4BAAKD,GACL,2BAAIE,MCSLI,EAdA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACb,OACI,6BACKA,EAAOC,KAAI,SAACC,EAAKC,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EACjBT,GAAIQ,EAAKR,GACTD,KAAMS,EAAKT,KACXE,MAAOO,EAAKP,aCCVU,EATC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACd,OACI,yBAAKV,UAAU,OACf,2BAAOA,UAAU,mCACjBW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC3DJ,EAAMK,WCkBJC,E,YAnBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAM,CACPC,UAAW,GAHD,E,+EAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,sDAEJG,KAAKX,MAAMK,a,GAhBCQ,aCyCZC,G,kBApCX,aACC,IAAD,8BACI,+CAOJC,kBAAkB,WACdC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAQ,EAAKR,SAAS,CAACvB,OAAO+B,QAXxC,EAaHC,eAAe,SAACC,GAET,EAAKV,SAAS,CAACW,YAAYD,EAAME,OAAOC,SAbxC,EAAKlB,MAAM,CACPlB,OAAO,GACPkC,YAAY,IAJpB,E,sEAmBC,IAAD,OACUG,EAAef,KAAKJ,MAAMlB,OAAOsC,QAAO,SAAAC,GAC1C,OAAOA,EAAM9C,KAAK+C,cAAcC,SAAS,EAAKvB,MAAMgB,YAAYM,kBAEpE,OACI,yBAAK5C,UAAU,MACf,qDACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKU,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUhC,OAAQqC,W,GA/BZb,cCMEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.7775123c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card=({name,id,email})=>{\n    return(\n        <div className=\"dib bg-light-green br3 pa3 ma2 grow shadow-5 tc bw2\">\n            <img alt=\"photoooo\" src={`https://robohash.org/${id}?200*200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList=({robots})=>{\n    return(\n        <div>\n           { robots.map((user,i)=>{\n            return(<Card key={i} \n             id={user.id} \n             name={user.name} \n             email={user.email}/>\n            );\n            })}\n        </div>\n          )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox=({searchchange})=>{\n    return(\n        <div className='pa2'>\n        <input className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='search robots'\n        onChange={searchchange}/>\n    </div>)\n}\nexport default SearchBox;","import React from 'react'\nconst Scroll = (props) =>{\n    return(\n        <div style={{overflowY:'scroll',border:'2px solid black',height:'700px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Oops thats an error :)</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\nimport './App.css';\nclass App extends Component{\n    constructor()\n    {\n        super();\n        this.state={\n            robots:[],\n            searchfield:''\n        }\n    }\n\n    componentDidMount=()=>{\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users=>{this.setState({robots:users})})\n    }\n onSearchChange=(event)=>\n    {\n        this.setState({searchfield:event.target.value});\n        \n    }\n    render()\n    {\n        const filteredrobots=this.state.robots.filter(robot=>{\n            return(robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))\n        })\n        return(\n            <div className='tc'>\n            <h1>R O B O F R I E N D S</h1>\n            <SearchBox searchchange={this.onSearchChange}/>\n            <Scroll>\n            <ErrorBoundry>\n            <CardList robots={filteredrobots}/>\n            </ErrorBoundry>\n            </Scroll>\n            </div>);\n    }        \n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}