{"version":3,"sources":["Reducers.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","Actions.js","constansts.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchfield","initialStateRobots","isPending","robots","error","Card","name","id","email","className","alt","src","CardList","map","user","i","key","SearchBox","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","App","componentDidMount","onRequestRobots","filteredrobots","filter","robot","toLowerCase","includes","onSearchChange","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0af867e.chunk.js","sourcesContent":["import { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_REJECT } from './constansts';\n\nconst initialStateSearch = {\n    searchfield : ''\n}\n\nexport const searchRobots = ( state=initialStateSearch , action={}) =>{\n    switch(action.type){\n        case CHANGE_SEARCHFIELD :\n            return Object.assign({},state,{searchfield:action.payload});\n        default:\n            return state;    \n    }\n}\n\nconst initialStateRobots = {\n    isPending : false,\n    robots:[],\n    error:''\n}\nexport const requestRobots = (state=initialStateRobots , action={}) =>{\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({},state,{isPending:true})\n        case REQUEST_ROBOTS_SUCCESS:\n                return Object.assign({},state,{isPending:false , robots:action.payload})\n        case REQUEST_ROBOTS_REJECT:\n            return Object.assign({},state,{isPending:false , error : action.payload})\n        default:\n            return state                        \n    }\n}","import React from 'react';\n\nconst Card=({name,id,email})=>{\n    return(\n        <div className=\"dib bg-light-green br3 pa3 ma2 grow shadow-5 tc bw2\">\n            <img alt=\"photoooo\" src={`https://robohash.org/${id}?200*200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList=({robots})=>{\n    return(\n        <div>\n           { robots.map((user,i)=>{\n            return(<Card key={i} \n             id={user.id} \n             name={user.name} \n             email={user.email}/>\n            );\n            })}\n        </div>\n          )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox=({searchchange})=>{\n    return(\n        <div className='pa2'>\n        <input className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='search robots'\n        onChange={searchchange}/>\n    </div>)\n}\nexport default SearchBox;","import React from 'react'\nconst Scroll = (props) =>{\n    return(\n        <div style={{overflowY:'scroll',border:'2px solid black',height:'700px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Oops thats an error :)</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\nimport './App.css';\nimport { setSearchField,requestRobots} from '../Actions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state =>{\n    return{\n        searchfield : state.searchRobots.searchfield,\n        robots:state.requestRobots.robots,\n        isPending : state.requestRobots.isPending,\n        error : state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots : () => dispatch(requestRobots())\n    }\n}\n\n\n\nclass App extends Component{\n\n    componentDidMount=()=>{\n        this.props.onRequestRobots()\n    }\n \n    render()\n    {\n        const filteredrobots=this.props.robots.filter(robot=>{\n            return(robot.name.toLowerCase().includes(this.props.searchfield.toLowerCase()))\n        })\n        return(\n            <div className='tc'>\n            <h1>R O B O F R I E N D S</h1>\n            <SearchBox searchchange={this.props.onSearchChange}/>\n            <Scroll>\n            <ErrorBoundry>\n            <CardList robots={filteredrobots}/>\n            </ErrorBoundry>\n            </Scroll>\n            </div>);\n    }        \n}\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCHFIELD ,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_REJECT  \n} from './constansts';\n\nexport const setSearchField = (text) => ({\n    type : CHANGE_SEARCHFIELD ,\n    payload : text\n})\n\nexport const requestRobots =()=> (dispatch) =>{\n    dispatch({type:REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data=> dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\n        .catch(error=> dispatch({type:REQUEST_ROBOTS_REJECT,payload:error}))\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_REJECT = 'REQUEST_ROBOTS_REJECT'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore,applyMiddleware,combineReducers } from 'redux';\nimport { searchRobots,requestRobots} from './Reducers';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\n\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware))\n\nReactDOM.render(<Provider store={ store }>\n    <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}